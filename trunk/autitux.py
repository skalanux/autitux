#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module autitux.py
# Autogenerated from autitux.glade
# Generated on Thu Oct 12 22:25:45 2006

# Warning: Do not modify any context comment such as #--
# They are required to keep user's code

#tengo que levantar el modulo ppdev
#modeprobe ppdev
#modeprobe parport
#modeprobe lp
#rmmod lp

import os

import gtk
import parallel
from SimpleGladeApp import SimpleGladeApp
from SimpleGladeApp import bindtextdomain
import autituxhelper
import common_functions
import gobject
import threading
import optparse
import config 

app_name = "autitux"
app_version = "0.0.1"

glade_dir = ""
locale_dir = ""

bindtextdomain(app_name, locale_dir)


class Mainwindow(SimpleGladeApp):

    def __init__(self, path="autitux.glade",
                 root="mainWindow",
                 domain=app_name, **kwargs):
        path = os.path.join(glade_dir, path)
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)
        gobject.threads_init()
        self.coma = autituxhelper.relayCommand()

    #-- Mainwindow.new {
    def new(self):
        print "A new %s has been created" % self.__class__.__name__
    #-- Mainwindow.new }

    #-- Mainwindow custom methods {
    #   Write your own methods here
    #-- Mainwindow custom methods }

    #-- Mainwindow.on_mainWindow_key_press_event {
    def on_mainWindow_key_press_event(self, widget, *args):
        keyValue = args[0].keyval
        print keyValue
        #Key mapping
        if keyValue == 65362:
            print "hola"
            common_functions.goNorth()
        
        elif keyValue == 65364:
            common_functions.goSouth()


        elif keyValue == 65363:
            common_functions.goEast()

        elif keyValue == 65361:
            common_functions.goWest()

    #-- Mainwindow.on_mainWindow_key_press_event }

    #-- Mainwindow.on_mainWindow_key_release_event {
    def on_mainWindow_key_release_event(self, widget, *args):
        print "on_mainWindow_key_release_event called with self.%s" % widget.get_name()
        self.coma.toggle(0, 0)

    #-- Mainwindow.on_mainWindow_key_release_event }

    #-- Mainwindow.on_btn_north_clicked {
    def on_btn_north_clicked(self, widget, *args):
        print "north"
        common_functions.goNorth()

    #-- Mainwindow.on_btn_north_clicked }

    #-- Mainwindow.on_btn_west_clicked {
    def on_btn_west_clicked(self, widget, *args):
        print "west"
        common_functions.goWest()

    #-- Mainwindow.on_btn_west_clicked }

    #-- Mainwindow.on_btn_east_clicked {
    def on_btn_east_clicked(self, widget, *args):
        print "east"
        common_functions.goEast()
    #-- Mainwindow.on_btn_east_clicked }

    #-- Mainwindow.on_btn_south_clicked {
    def on_btn_south_clicked(self, widget, *args):
        print "sur"
        common_functions.goSouth()
    #-- Mainwindow.on_btn_south_clicked }

    #-- Mainwindow.on_btn_twist_clicked {
    def on_btn_twist_clicked(self, widget, *args):
        self.fullTurn()

    #-- Mainwindow.on_btn_twist_clicked }

    #-- Mainwindow.on_btn_zig_clicked {
    def on_btn_zig_clicked(self, widget, *args):
        self.goZigZag()
    #-- Mainwindow.on_btn_zig_clicked }

    #-- Mainwindow.on_btn_straight_clicked {
    def on_btn_straight_clicked(self, widget, *args):
        self.goStraight()
    #-- Mainwindow.on_btn_straight_clicked }

    #-- Mainwindow.on_btn_eight_clicked {
    def on_btn_eight_clicked(self, widget, *args):
        self.goEight()
 #-- Mainwindow.on_btn_eight_clicked }

    #-- Mainwindow.on_btn_loco_clicked {
    def on_btn_loco_clicked(self, widget, *args):
        self.goCrazy()
    #-- Mainwindow.on_btn_loco_clicked }

    #-- Mainwindow.on_button1_clicked {
    def on_button1_clicked(self, widget, *args):
        gtk.main_quit()
    #-- Mainwindow.on_button1_clicked }

    #-- Mainwindow.on_button2_clicked {
    def on_button2_clicked(self, widget, *args):
        print "on_button2_clicked called with self.%s" % widget.get_name()
        self.coma.toggle(0, 0)

    #-- Mainwindow.on_button2_clicked }
    

    def fullTurn(self):
        common_functions.executeLogoCommands(config.config["FullTurn"]["secuence"])

    def goZigZag(self):
        common_functions.executeLogoCommands(config.config["ZigZag"]["secuence"])

    def goStraight(self):
        common_functions.executeLogoCommands(config.config["Straight"]["secuence"])

    def goEight(self):
        common_functions.executeLogoCommands(config.config["Eight"]["secuence"])

    def goCrazy(self):
        common_functions.executeLogoCommands(config.config["Crazy"]["secuence"])

#-- main {

def get_options():
    usage = "usage: %prog [options]"
    description = "Mover el autitux segun un patron de comandos o con un comando preestablecido."
    status = True
    version = "1.0"
    parser = optparse.OptionParser(usage=usage, version=version,
                                      description=description)
    parser.add_option("-c", "--command", dest="commandName",
                      help="Nombre del comando a ejecutar")
    
    parser.add_option("-p", "--parameters", dest="parametersList",
                      help="Lista de parametros separados por ; ej: n:20;s:10;e:1")
    
    parser.add_option("-n", "--no-gui", dest="noGui",
                      action="store_true",
                      help="No arrancar la interfaz grafica")

    (options, args) = parser.parse_args()
    
    if options.noGui:
        return options
    else:
        return None
    
def doCommandLine(options):
    """
    do all command line parsing
    """
  
    if options.commandName and options.parametersList:
        print "No podes elegir ambas opciones al mismo tiempo o pasas una lista de parametros o un comando"

    if options.commandName:
        print options.commandName     
    elif options.parametersList:
        print options.parametersList
        common_functions.executeLogoCommands(options.parametersList)
    else:
        print "No se paso ninguna opcion"
        
    
    
    


def main():
    options = get_options()
    if options:
        doCommandLine(options)
    else:
        main_window = Mainwindow()
        main_window.run()

if __name__ == "__main__":
    main()

#-- main }
